package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1a\x59\x73\xdb\xc6\xf9\x5d\xbf\x62\x15\xcf\x84\xa0\x4d\x83\x52\x1e\xc5\xaa\x49\xc7\x69\x66\x7a\xf8\x98\x28\x9e\x3e\x28\xac\x04\x01\x4b\x11\x11\x89\x65\xb1\x80\x54\xd5\xe1\x7f\xef\xf7\xed\x7d\x81\xa2\x2c\x67\x9a\x34\xc6\x83\x48\xee\xee\x77\x9f\xfb\x41\x8b\xbe\x29\xbb\x9a\x35\x64\x55\x66\xbc\x6b\xc7\xe4\xc3\x01\x21\x2d\xed\xfa\xb6\x21\xf0\x9b\x7c\xf9\x25\x7e\xe4\x1d\xfb\x3b\xbb\xa3\xed\xab\x82\x53\xf2\x75\xb8\x92\x8d\xc9\x09\xae\xcd\x0e\xb6\x07\x07\x06\xe1\x35\xed\xbe\xa7\xb7\x35\x85\x43\xfc\x3b\xd6\x7e\x57\xaf\x68\xb6\x80\x3f\x7c\x42\x36\xfd\x6a\xf5\x3d\xfd\x57\x4f\x79\xf7\x9e\xd3\x16\x16\x5a\xba\xa0\x6d\x4b\x2b\x03\x21\x19\xb9\x2d\x5a\x60\x46\x2e\x21\x02\x4e\x4e\xc9\x87\xed\x4c\xed\x20\x36\x03\xa0\x76\x60\xeb\x22\xa7\x45\xb9\xcc\x62\x9c\x13\x62\x98\xd3\x9c\x68\xe4\x92\x9c\x81\x55\xbb\xfe\x71\x7d\x86\xf8\x84\xcf\xf1\xd7\x1c\xc8\xa7\x56\x7f\xfe\x99\x9c\xcf\x67\xc3\x60\xf9\xa6\xe7\xcb\xcc\x70\x21\x4f\x6e\xc5\x27\xfe\x3d\xd8\x8f\x23\x57\x4d\xa8\x88\x58\x74\x41\x2d\xc7\x3f\x4d\xb1\xf6\xf9\xaa\x17\xc4\x30\xc0\x73\x38\x70\xdd\x2d\xc9\x1f\xc9\x91\x15\x57\xb1\xd0\xa6\xf4\x18\x2a\x10\x1f\xcf\x62\xe7\xfa\x17\xaa\x68\x68\xc7\x53\xd3\x20\x82\xa4\xb2\xb4\xba\xe0\x93\xd0\x15\xb8\xa7\xe6\x03\x95\xb2\x29\xba\x8e\x82\x27\x9f\x82\x0c\x8b\xba\xa9\xb2\x92\x35\x8b\xfa\x3a\x57\xeb\x91\x42\x5f\xc1\xb6\x2b\x89\x83\x83\x2b\x0b\xe3\x11\x0d\x3f\xf3\x0e\xf6\xe0\xca\xa8\x5d\xef\xa4\x51\x9a\x30\xa6\x3d\xbc\x2e\xba\x72\x69\xf9\xd2\x44\x72\xbe\x59\xd5\x5d\x36\x9a\x8c\xc6\x2e\x6f\x6a\xdb\x65\x8d\x90\xe9\x14\xa4\xe1\x0c\xec\xba\x62\xd7\xfa\xc8\x84\x78\x96\x1e\xcf\x1c\x00\x15\xd6\x82\x34\xaa\xf6\x5d\xd1\x2d\x1f\x86\x53\x7e\xa8\x69\x12\xed\x53\x64\xc1\x64\x08\x92\xb2\x68\x3a\x72\x45\x49\xb7\xa4\x84\x03\x30\x29\xb8\xf8\x8e\x61\x0e\x44\x45\x9c\x13\x4e\x9b\x8a\xb6\x06\x11\x7a\x9d\xd4\x01\x64\x98\xcc\xa8\x2e\x07\x65\xd0\x7f\xbf\x5d\x64\x41\x8a\x18\x93\xd3\xd3\x53\xf2\xf2\x18\x3d\xc5\x1e\x36\xce\x7a\x3c\xf6\x55\xa3\x24\xbd\xc8\xef\xea\x6e\xc9\xfa\xce\x12\x88\x92\xcf\xd8\x71\x79\x47\xe8\x83\x48\x78\xe4\xf8\x30\x61\x08\x49\xcb\x38\xa3\x3e\xee\xc6\xa3\xe5\x43\xc1\xe7\x4e\x2c\x85\xfc\x18\x82\x6e\x54\xbf\x62\x3d\xe8\xf8\x94\x84\xf0\x72\x1d\x94\x72\xec\x81\x15\xab\x96\x16\xd5\xbd\x34\x55\xdd\x5c\x0b\x1e\xea\x06\x40\x39\x15\x2e\x95\x45\xb1\xc6\x27\x66\xe9\x22\xbf\xa1\xf7\x3c\xf3\xa2\x70\xac\x76\x7d\x7d\x84\x74\x92\xe9\x43\x39\x3c\x6b\x4d\xf2\xd3\xd2\xf8\x52\xbc\x8c\xd8\x56\xe8\x66\xbe\xd7\x44\x88\x02\x6a\x92\x5e\xc3\x3a\x5f\xfc\xaa\x5e\x40\x52\xa4\x4d\x49\xdd\x4c\x16\x92\xf4\x02\x06\x3d\x3c\x43\x64\x35\x60\x38\x9a\xc1\xc7\x1f\x12\x72\x80\x03\xbb\xc4\x5c\x7f\x22\xf5\x8b\x17\x3e\x6b\xca\xac\x45\x53\xb1\xb5\x89\xa4\x53\x1f\x01\xe6\x00\xe0\xf2\x35\x84\x67\xbe\x58\x31\xd6\xca\xaf\x12\x08\x8a\xed\xf3\x14\x3d\xc8\x17\xc7\xe3\xf3\xa3\xf9\xcc\x23\x16\x69\x54\xa6\x50\x8f\xbc\x27\xf2\x36\x0a\x01\xdf\x95\x43\x84\x91\xdf\xa7\x74\xd6\x86\xfa\x4a\xd5\x9b\x48\x59\x49\x45\x41\x9b\x62\x81\x1f\x56\x54\x48\x48\x6b\x69\x3c\x58\x6c\x3c\x82\x89\x9a\x15\xec\xef\xae\x5c\xfe\x61\xa9\xfc\x74\x9e\xdd\xba\x61\xa5\xa3\x9c\xdd\x35\x7e\x65\x45\x95\x88\x45\xa9\x09\xff\xdc\x10\x17\x62\x37\x96\x44\x2d\xef\x14\x40\x9e\xd9\xcd\xb7\xfe\xbb\x9d\x40\xd2\xaf\xb9\x4c\x10\x2a\x01\x7b\xd8\xa2\xf6\x10\x57\xcf\x96\xc5\xeb\x62\x23\xdb\x1b\xdb\xf3\x2d\xcc\x8e\x69\xf8\xf6\xe9\x83\x2c\x58\xd8\xef\xc8\x8a\x9c\xf3\x65\xa1\x5b\x2b\xc3\xa3\x05\xf2\x19\x74\xf2\xf2\xdb\x0d\x6d\x68\x95\xd1\x5b\xda\x74\xdf\x16\x5d\x61\x19\x0d\x92\xb7\x34\x8b\x39\x97\xe3\xf6\x85\xaa\x80\x39\xd6\x20\x2c\xd5\x75\x23\x75\xa4\x05\xc5\xb0\x02\x6d\xbc\xb3\xa8\x84\xba\x1c\x34\x4d\xbf\xbe\x52\x06\x4e\x75\xc4\x8f\xe9\xb4\x3f\x6c\xc7\xb3\x94\x92\x53\xe6\x10\x5c\xa2\x3f\x26\x0b\x42\x22\xd7\x8b\x3c\x4f\x39\x2f\xae\x29\xa0\x1c\xfd\xe9\x8e\x72\x06\xed\xc0\x1d\x6b\x6f\x0e\xc9\x1b\x76\x47\x7e\xea\xb1\x13\xa8\xa1\x5b\x28\xca\x1b\x02\xd1\x41\xee\x0a\xf8\x85\x39\xe3\x87\xb6\xb8\xad\xa1\x6f\x60\x50\xe3\x38\x17\x7b\x0c\x9a\x88\x56\x2c\x49\xca\xe4\x9e\xf5\x2d\x29\x59\x45\xf3\x1f\x9b\x1f\x9b\x91\xf4\x41\x4d\xf0\x05\x50\x7c\xf6\xcc\xb4\x27\x5c\x1c\x70\x9b\x7a\x8f\xfd\x3d\xee\x02\x3e\xea\x6f\x46\xe4\x85\x39\x02\x5f\x47\x86\x81\x7d\x6f\x0d\x3e\xbe\x97\xe4\x12\x31\x8a\x06\x0a\xb0\x5d\x3a\xe8\xb6\x26\xba\x5c\x00\x73\xc0\xf4\x24\xfe\xee\x33\x23\x3c\xa8\x68\xbd\x06\x05\xf2\xa4\x8e\xa0\xcc\x96\x25\xdd\x74\x27\xe4\x72\xd3\x5e\x28\xcd\xbe\xfd\xdb\xe5\xd0\xe1\xaa\x32\x62\x7b\x20\xb8\x71\xae\xfb\xaa\x39\x39\x57\xc9\x68\x3e\x84\xa8\x5c\x16\x0d\xfc\x48\xe2\x52\x7b\xe7\x6c\x55\x5d\x38\x28\x1b\x7a\x67\x7f\x0e\xe1\xdd\xb4\xd0\xd8\xc0\xf5\xb3\xe8\x7a\xee\x21\x95\x4b\x97\xd6\x0f\x4a\x28\x5d\x1d\xfd\x0b\xe7\x3d\xf4\xe6\xeb\x35\x44\x57\x14\x63\x13\x8d\x5c\x99\x40\x82\x9c\x09\x4c\xba\x67\x1a\x08\xef\x25\xd4\x45\x4c\x30\xba\x8f\x1a\x41\xd2\xa8\xa0\x42\x8e\x26\xbb\xe1\xfa\x76\x65\x40\xde\xb9\x1d\xb3\x14\xe3\x84\xa0\x9b\xa4\x23\xf0\x27\x56\x37\x70\x57\x20\x70\x59\x30\x44\xb5\xf8\x23\xb1\xa2\xc4\xe0\xc5\x2d\x45\xca\x91\xbc\xe8\x7a\x27\x18\x83\xc0\xa8\x02\xbc\x58\xb4\x6c\x0d\x48\xff\x7a\xf6\xf6\x4d\x0e\xb7\x7a\xd8\xa9\x17\xf7\x01\x69\x79\x43\x45\xb5\xee\x46\x2d\x42\x22\x46\x66\x53\x0f\x62\x1a\xc8\xba\xef\x37\x15\xe8\xfe\xd3\xa6\xdd\x27\x64\x5d\xcb\xf3\x59\x27\x28\xb2\xa2\x7a\x48\x70\x03\x0c\x8e\x6d\x12\xd3\x3e\xe0\x29\x93\xa4\x13\xb7\x1d\x87\xb8\x34\xec\x34\xa4\x6b\xef\xa3\xea\x08\xbb\xc2\x20\x9b\x02\xee\x03\x99\x27\x98\x34\x2c\x5c\xe9\xe0\x6a\x96\x61\xf2\xda\xfa\x48\x02\x22\x0e\x9a\x40\xc4\x34\x22\xad\x79\xbc\xf6\xae\x20\x5d\xec\xce\x99\x58\x7b\x86\x6b\xfa\xe1\xa9\xad\xea\xfe\x6c\x66\x9f\x1e\x40\x36\x3b\xa2\x03\xe8\xda\x9e\xce\x6c\x1f\x63\xab\xf3\x53\x0a\xad\xab\x8e\x27\x57\xd2\x33\x2c\xa3\x6c\x21\x6e\xd5\x52\x85\x00\x4c\x49\x2f\x23\x64\xef\x6a\xf8\xff\x5c\x0c\xa7\x53\xf2\x9a\xb6\xb0\x0d\x8a\xe7\x4a\x49\xd8\x65\xb8\x42\xbb\x36\xd9\x4b\xe6\x36\x79\xf1\x18\xcf\x82\xed\xfd\x07\x5d\x5f\x03\x2b\x7d\x83\x17\xf0\x80\x66\x70\x10\x27\xaa\x0b\xd9\x34\x7b\x52\x3e\xb2\x84\x7d\xae\x61\xff\xe3\x1a\x16\x19\xc9\xd6\xb0\xba\x02\x3f\xb1\x04\x6b\xb4\xa9\x22\xab\x33\xba\x9c\x99\xbd\xc1\x91\x5a\x50\xe1\xe4\x4e\x50\xd6\xae\x58\x75\xef\xe1\x2c\x25\xf5\x1c\x37\x72\x60\x1c\xee\xc4\xfa\x6c\xb9\xae\x84\x7b\x18\xa6\x8b\x55\x5d\xf0\xf7\xaa\xd9\xb2\x13\x39\x1d\x0b\xee\xa8\x71\xf4\x6a\x49\xcb\x1b\x9c\xab\x08\x20\xd1\xbe\xa3\x81\x0d\x8c\x34\x98\xca\xae\x7a\x55\x4c\xf0\x46\x6b\x3a\xc2\x17\x08\x56\xb0\x13\x73\xc0\x98\x43\x45\xab\xe0\x5a\xcd\x43\x21\xde\xbd\x81\xa8\x76\x71\xa7\x50\xa8\xa5\x9c\xf7\x57\x60\xa4\xec\x68\xe2\x3a\x92\xbe\xfe\x07\xaf\x2d\x04\x4b\xf6\x94\x0d\x7c\x50\x8f\x5b\xa5\x9c\xd1\xd8\x1a\xae\x47\x3e\x29\x50\x44\x76\x7c\x34\xd6\xac\x92\x70\x74\xdb\x76\xc9\xe1\x24\x6e\x28\xa3\xe4\x2d\xdd\xac\x8a\x92\x66\xd3\x7f\x7e\x33\x05\xbe\x47\xde\xf8\xd5\x0e\xe6\x2c\x56\xe0\x2f\x89\xf4\xf0\x50\x18\xd6\x00\x47\x53\x3b\xcf\x8e\x28\x25\x1a\x0e\x3e\x55\x1c\x02\xf3\xf6\x2c\xbf\xab\xb1\x78\xc3\xee\xf9\xd1\xdc\xd7\x9c\x4b\xbc\xc4\x97\x42\x23\x76\x33\x3a\x09\x46\x70\xa0\x1b\x74\x43\xb7\xd9\x01\xa7\xdf\xd9\xde\xe8\x07\x0d\xaa\xc0\xc3\xf9\x99\xed\x45\x7c\x6a\x61\xb1\x76\x5a\x13\x8d\x69\x16\x80\x55\x74\x45\x3b\x1a\xe4\x60\xeb\x9b\xf3\xf0\xbc\xc9\x13\x3b\xc4\x78\x38\xe9\x24\x78\xdf\xb4\xdf\xd2\xae\xa8\x57\x71\x53\xaa\xd6\x81\x62\xc4\xfd\x83\xfd\x04\x7a\xf7\x51\xa8\x3e\x61\x31\xb7\x22\x18\xda\x36\xfb\x93\x11\xef\xe1\x8e\xc8\x31\xeb\xd9\x6d\x4c\xf2\xc9\xf4\x4e\x2a\xd6\xd0\x91\x17\x6f\x11\xb3\xc9\xd2\x55\x57\x13\xf2\x85\xbd\xb3\x6e\xd0\x1a\xd5\xe1\x17\x11\x70\xf0\x66\x67\x40\x90\x68\x97\x90\x84\x6c\x89\x53\x51\x95\x4b\xa3\x70\x8a\x9c\x07\xfd\xe4\x82\xe7\xf3\xe2\x17\x3f\xf7\x89\xf5\xe2\xfb\x92\xdf\x6d\xbb\xc7\xf4\xb7\x2b\xd0\xd7\xcd\x2c\x88\x5c\xb8\xc8\x7b\xa1\x8b\x7e\x85\x31\x7f\x3c\x4f\x8d\xae\xe1\x34\xad\xd4\xa5\xcb\xab\x19\x19\x14\x28\x05\x16\x30\xea\xbf\x89\xc3\x33\x5f\xcd\xe3\x13\x70\xd9\xd7\xa1\x7b\x9e\xd8\x7e\x42\x32\xd9\x99\x4e\xd2\x09\xe5\x11\x29\x25\x82\x74\x26\xb8\xa9\xe0\x23\xae\xa4\x17\x58\x4e\x4c\x99\x49\xdd\x47\x21\xf0\x77\x75\xd1\xee\xf3\x71\xef\xf7\xec\xb3\x7d\x2c\x25\x0f\x65\x1a\x63\xbc\xba\x8d\x35\xe6\x27\x60\xe3\x61\x73\x51\x82\x65\xbb\x3c\x78\x44\xcc\xaf\x27\x46\xa7\x09\x82\x9f\x26\x6b\x87\x58\x3f\x3a\x6d\xff\xee\xb3\xd6\x60\x29\x90\xd7\x4a\x9b\x60\xc0\x58\xf2\x57\x5c\x4e\x86\x52\x9d\x9b\xec\x76\x24\xbe\xe9\xf3\x20\x07\xb6\x74\xcd\x6e\xe9\x23\xd2\xe0\xaf\x36\x1d\x85\x80\xc9\x1e\x47\xca\x15\xf5\x37\xbf\x4c\xac\x3c\xd1\x56\xcf\xa7\x81\xad\xe4\xb0\x78\xc0\x56\xf8\x76\x51\x56\x98\x94\xd5\x90\xff\xc7\xd7\xae\x8e\xed\x82\xf9\x2a\x09\xf3\xab\xf5\x8f\x64\xb9\xf2\xbd\x43\x6b\x29\x52\xa1\x7c\xfc\xc3\x52\x39\xc3\xa9\x5a\xef\xab\x3c\x3d\x44\x29\x55\x3d\x92\xae\x6b\x40\x52\x10\x4f\x48\xca\x0f\xa7\xe5\x7d\x13\xf3\x03\xa9\x79\x8f\xe4\xfc\xa9\xd3\xf3\xee\x04\x9d\x4c\xd1\xbf\x54\xd9\x7c\x20\xf9\x9b\x00\xc5\xdc\x2f\x03\xbd\xc2\x17\x80\x62\x53\xba\x52\xb2\xa5\x08\x7e\x3f\x2d\xe3\xe8\x92\xc0\xc0\x8c\x4e\x9a\x11\x09\xa4\xb8\xa1\x7f\xc6\xf9\x0a\x0e\xd8\xe5\xb0\xe6\x84\x20\xfb\xee\x38\xec\x64\xd8\xef\xb6\x96\x4a\xfc\x7e\xd9\x20\x77\x44\x4c\xb2\x26\xdf\x6c\xfd\xf6\xee\xdb\xc1\x54\xfb\x1f\x92\x2b\x7d\x8b\x44\xae\x9c\x49\xb6\x7d\x3e\x7a\x64\x6d\x9f\x7d\x87\xd7\x11\xd1\x07\xc7\xd8\x69\x1a\x2f\x89\x3b\xcf\x4e\x12\x48\xf5\xc6\xc9\x11\xb7\x0f\x12\x2c\x0d\x44\x53\x30\x02\xb6\xcf\xc7\x0f\x0d\x3e\x55\xc3\xfb\x79\xde\xf0\x9b\xed\xdc\x9f\x36\x6f\x70\xfe\x55\x48\x0e\xcc\xa7\x53\xf2\xae\x65\x68\x77\xb2\x64\xec\x86\x54\x90\x33\x0e\xd0\x41\xc5\x04\xfb\x87\xfb\x8d\x9a\x19\xbb\xb9\x75\x84\x0d\x9e\x9d\x70\x17\x32\x2a\xc5\x31\x26\xb2\xa8\x1a\xe2\xee\xfa\xef\x1d\x20\x2e\x0d\x9c\xa0\x25\xc6\xf0\x17\x6a\x70\xbe\x83\x98\xf4\x84\x2a\x38\x21\x87\xf8\x2e\xbf\x11\x37\xf1\x1b\x81\x5d\xec\xec\x29\x3a\xbf\x6f\xca\x65\xcb\x9a\xfa\x3f\x34\x96\x3f\x7e\x8f\x8e\xda\xff\x6f\x00\x00\x00\xff\xff\xe3\x0b\x60\x56\xf9\x2f\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 12281, mode: os.FileMode(420), modTime: time.Unix(1477047910, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _pr_review_peer_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4b\x73\xdb\xb6\x13\xbf\xeb\x53\xac\xc6\x33\x21\x39\x96\x69\xe7\x2a\x8d\xf3\xcf\xbf\x4e\x0f\x7d\x8c\xed\x89\xd3\xe9\xc1\x76\x65\x88\x5c\x49\x8c\x28\x82\x05\x40\xab\x6a\xa2\xef\xde\x05\xc0\x07\x48\x3d\x2c\xa7\x39\x56\x07\xdb\x02\x16\xbb\xbf\x7d\xef\x7a\x5a\x64\x91\x4a\x78\x06\x69\xe4\x4b\x25\x02\xf8\xd2\x03\x10\xa8\x0a\x91\x01\x7d\x87\x37\x6f\xf4\xaf\x50\xf1\x5f\xf9\x0a\xc5\x15\x93\x08\xff\xeb\x9e\xf8\x01\x0c\xf5\xd9\xa8\xb7\xe9\xf5\x6a\x86\x79\x91\xa6\x1f\xf1\xcf\x02\xa5\xba\xc9\x31\xc3\xd8\xc7\x67\xcc\xd4\x07\xa6\xd8\x00\x8a\x3c\x66\x0a\xad\xb4\x67\x26\x5c\xe2\xdf\x24\x0a\xb8\xd4\x78\x6a\xfa\x50\x5f\x8f\x85\xbd\x0f\x0b\x22\x08\x53\x3e\x4b\xb2\x60\x54\x3e\x17\xf8\x9c\xa0\x46\xc3\x8b\x4c\xd1\xe3\x88\x67\xd3\x64\x16\xb6\x8e\x2b\xda\x5c\x5c\x17\xcb\x89\x91\xd1\x08\xc8\xcc\x51\x45\xb2\x44\x29\xd9\x0c\x47\x3d\xfa\x9e\x4c\xc1\xef\xbb\x70\xa1\xba\x26\x06\xde\xff\x57\x28\xf9\x12\x61\xc5\xc5\xa2\x0f\xd7\x7c\x05\x9f\x0b\xa9\x40\x26\x0a\x26\x2c\x5a\x00\xcb\x62\x58\x31\xfa\x36\xe5\x02\x3e\x09\xf6\x9c\x48\x50\x1c\x72\x26\xa5\xb9\x7b\xf2\xe0\xb4\x83\xfe\x14\xbc\x27\xe0\x6a\x8e\xc2\x90\xda\x4b\x58\xf3\x42\x90\x5a\x31\x86\x0f\xd9\x43\xe6\x19\x68\x0d\x92\x53\x82\xf2\x90\x9d\x9c\x9c\xc0\x47\x4b\x1e\xf1\xe5\x92\xf8\x4b\x43\xda\xa5\x3c\x03\x16\x45\x98\xab\x21\x3c\xe5\x62\x5c\x0a\xb8\xf9\xe5\x69\x0f\x71\x2e\x12\x82\x25\x15\x53\x85\x6c\x3d\xb1\x47\xd5\xb3\x0d\x60\x4a\xd1\xb1\x65\xa2\x3b\x6d\x1f\x3e\x05\xd2\x08\xa6\x49\x8a\x12\x48\x55\x2c\x23\x20\xee\xbf\x64\x82\x0c\x31\x76\xec\xa0\xb9\x44\x73\x96\xcd\x50\x86\x56\x6c\xed\xa4\xd2\xe9\x92\x64\x64\xaa\xf2\x55\x24\x90\xc4\xfc\x24\x65\x81\x57\x64\x13\xba\xf1\xab\x00\x18\x54\x28\x03\xcb\xa7\x22\xbe\x33\x6a\xf9\xe6\xf9\x9e\x10\x9c\x23\x8b\x43\x39\x67\x03\x43\xe4\x51\x78\xc7\x49\x36\xf3\x06\x87\xde\x14\x22\x2d\xc9\x6f\xe9\x18\xca\xe3\x4a\x2f\x1d\x24\xc4\x02\x76\x1a\x03\x72\x24\x53\x78\x95\xb4\xca\x01\x1e\x7d\x37\xd8\x25\x7b\x46\x2d\xb0\x56\x4d\x3f\x1a\x96\x2c\x4b\xe2\x71\xa4\xb9\x79\x03\xf8\xf9\xee\xe6\x3a\xa4\x6c\xa5\xab\x64\xba\xf6\x5b\xc2\x82\xa3\xd9\x61\x3c\x9e\xac\xb7\xb9\xdd\x3f\x6a\x16\xe4\x93\x9d\x75\xa0\xf2\x40\x6d\x21\xa7\x00\xec\xca\xca\x44\xbb\xad\x93\x9b\x92\x6c\x8d\xe2\x9a\x2d\xb1\x5b\x24\xec\x4d\xa7\x32\x4c\x78\xbc\x6e\xf1\x8c\x2c\x86\x50\x5f\x84\x84\x7b\xe9\xd7\xb4\xd1\x32\x36\x79\x35\x0e\x91\x45\x73\xdf\x50\xc8\x3c\x4d\x94\x4f\xc9\xe5\x05\x03\xa8\x75\xf2\xab\xc8\x29\xa3\x4c\xc7\x5f\x79\x14\xca\x62\x42\xf6\xf0\x2f\x06\xae\xa7\x42\x8a\xc9\x99\x9a\x07\x9d\xb2\x79\x79\x79\xe9\x52\x55\xec\x40\x43\x21\xd4\xe3\x90\x12\x46\xa1\xf0\xcb\x53\x0d\x6d\xc9\xf2\x8e\x28\x32\xbd\xff\xf6\x22\xa8\xa0\x42\x1b\x69\xce\x84\x6a\xf8\xea\x4f\x59\xdd\xf5\x45\x69\x00\x2a\x94\x79\xca\x22\xf4\xcf\xff\x78\x7f\x4e\xb8\xbd\x60\x54\xd3\x6f\x82\x41\xfd\x77\xc3\x95\xf0\xed\x64\xda\xef\x1b\x23\xd6\x8f\xcb\xbf\x82\xb2\x5e\x81\xae\xcc\x92\xa7\xa8\xbd\xe4\x7b\x5a\x4b\x1d\xf0\xf4\x3b\xfc\xcc\x93\xcc\x80\x6f\x68\xe5\x2a\x51\xe4\x07\xba\xbd\xbf\x78\x6c\x5b\xce\x15\x1e\xe9\xa6\xe4\xf1\x85\x37\xec\x39\x80\x6c\x50\x7d\x40\xc5\x92\x54\x92\x2d\x67\xa8\x6e\x9b\x48\x2c\xcf\xeb\x08\x77\x14\x3e\xd0\x90\x6a\x7e\xdd\x1e\xe4\xbe\x6c\x25\xd4\x9d\x32\x4f\x39\x8b\x8f\xcc\xcf\x00\xbe\x7e\xdd\xd9\xbe\x48\xff\x3b\xeb\xeb\x7d\x12\xe3\x1f\xd6\xc7\x8b\xb3\xf9\x6b\xa4\x79\xf7\x8f\xde\xa8\x6b\xba\x6e\x47\x35\x79\x4e\x21\x43\xc6\xef\x2a\x78\x00\xcf\xce\x87\x16\x67\xd0\x12\xa9\x13\xc8\xcd\x6c\xca\x8b\x8e\x07\xda\xe1\xf6\x42\x61\xf7\xae\x58\x56\x97\x56\xbe\xb2\x45\xa8\x2a\xb9\x5e\x0b\x70\x15\xba\xee\xd9\xa6\x0b\xad\x41\x1e\x26\x04\xf2\xaf\x9b\xa9\x83\x36\x80\x77\x70\xf6\xb6\x8b\xef\xfc\x1c\x58\x4a\x18\xa9\xfc\x54\xaf\x61\xb2\xa6\xfe\x45\x13\x80\x8e\x9e\x57\x28\xf3\x5e\xe7\x88\x63\x1d\xdd\x11\xba\xbc\xfb\xaf\xd4\xca\xd1\x28\x2f\xe4\xdc\x55\x67\xb4\x4d\x66\x7d\x7d\x76\xb6\xe5\xb3\x76\x98\xbc\x83\x8b\xdd\x6e\x72\x5b\x6a\xf3\x69\xd2\xa9\xdd\x4f\x9b\x4f\xa7\xb3\xee\x7a\x5a\xb7\x55\xe7\xd5\xbf\x6b\xb0\xae\x78\xb7\xd5\x36\x9f\x96\x89\x5a\x73\xcf\x77\x52\x5b\x16\x34\xa0\xc9\x6d\x40\xaf\x57\x3b\xe6\x19\x7e\x9b\x5e\x87\xa6\xaa\xae\xa2\xfb\x22\xb7\x99\x46\xf3\x14\xd5\x8e\x28\xdd\xec\x8b\xcf\xef\x3c\xd2\xbc\x86\xed\x9e\xd1\xa6\xc9\x98\xc0\xad\x5d\x13\x32\xc0\x62\xd4\x69\x46\x76\x32\xa6\x86\xd4\x48\xfe\xaf\x35\x7c\x63\x6b\x70\x16\x32\xbd\x4e\xfc\x5e\xe6\x71\x19\xdf\x53\xc1\x97\x7b\x56\x08\x9b\xd4\x4f\xd5\xc2\xd4\x70\xdc\xb7\x35\x99\x0a\xdd\x2c\x57\xf6\x53\x0e\x83\x0d\x40\x77\xb8\xaa\x64\x6e\xe7\x45\x7b\x85\x72\xf1\xb5\x6a\x47\x5b\xd5\xa3\x97\x95\x03\xa1\x27\x90\x53\xd1\xdc\x0a\xbd\x29\x5b\xe0\x8f\x7a\x08\x26\x1b\x7e\xb1\x13\xf5\x10\x1a\xe6\xee\xa6\x32\x7c\x69\x56\xda\xb8\x2a\x6c\xaf\xf9\xb5\xa8\x7d\x50\x6d\xd2\xeb\x9f\x1b\xbb\x2c\x50\xaf\xbc\x15\x5c\x57\x3c\x98\x73\xbe\x00\xda\x0c\x59\x4f\x57\x1f\x33\xb6\x7f\x5a\xe7\x58\x4e\xca\x0e\x4a\x4f\xff\x6b\xa2\x19\xeb\x99\xf5\x88\x21\xe3\x06\x47\x39\x4d\x1f\xf8\x37\x84\x16\x6e\x8b\xf7\x0e\x59\x66\xf7\x18\x97\xdb\xc2\x01\x61\xd6\x67\x71\x87\xc2\x6e\x2e\x2e\xde\x2d\x34\xdb\xcb\xd0\x21\x38\x47\xaa\x2e\xd7\x59\x34\x17\x3c\x4b\xfe\xc6\x97\xf5\x1f\x80\x12\x05\x1a\x17\xfc\x13\x00\x00\xff\xff\x1c\x5f\x67\x62\x07\x12\x00\x00")

func pr_review_peer_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_peer_js,
		"pr_review_peer.js",
	)
}

func pr_review_peer_js() (*asset, error) {
	bytes, err := pr_review_peer_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review_peer.js", size: 4615, mode: os.FileMode(420), modTime: time.Unix(1477047910, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
	"pr_review_peer.js": pr_review_peer_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
	"pr_review_peer.js": &_bintree_t{pr_review_peer_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

