package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x59\x73\xe3\xc6\x11\x7e\xd7\xaf\x18\x79\xab\x4c\x70\x97\x0b\x4a\x7e\x14\xa3\xd8\xa9\x75\x5c\x95\x63\x8f\xb2\xbc\x95\x07\x99\x91\x20\x60\x28\xc2\x22\x31\x0c\x06\x90\xa2\xac\xf9\xdf\xd3\x3d\xf7\x05\x8a\x5a\xad\x2b\x76\xbc\x7c\x90\x44\xcc\xf4\x39\xdd\x5f\xf7\x34\xb4\xe8\x9b\xb2\xab\x59\x43\x56\x65\xc6\xbb\x76\x4c\x3e\x1c\x10\xd2\xd2\xae\x6f\x1b\x02\xdf\xc9\x97\x5f\xe2\xaf\xbc\x63\x7f\x67\x77\xb4\x7d\x55\x70\x4a\xbe\x0e\x9f\x64\x63\x72\x82\xcf\x66\x07\xdb\x83\x03\xc3\xf0\x9a\x76\xdf\xd3\xdb\x9a\xc2\x26\xfe\x1d\x6b\xbf\xab\x57\x34\x5b\xc0\x0f\x3e\x21\x9b\x7e\xb5\xfa\x9e\xfe\xab\xa7\xbc\x7b\xcf\x69\x0b\x0f\x5a\xba\xa0\x6d\x4b\x2b\x43\x21\x15\xb9\x2d\x5a\x50\x46\x3e\x42\x06\x9c\x9c\x92\x0f\xdb\x99\x5a\x41\x6e\x86\x40\xad\xc0\xd2\x45\x4e\x8b\x72\x99\xc5\x3c\x27\xc4\x28\xa7\x35\xd1\xcc\xa5\x38\x43\xab\x56\xfd\xed\x7a\x0f\xf1\x05\x9f\xe3\xb7\x39\x88\x4f\x3d\xfd\xf9\x67\x72\x3e\x9f\x0d\x93\xe5\x9b\x9e\x2f\x33\xa3\x85\xdc\xb9\x15\xbf\xf1\xe7\xc1\x7e\x1a\xb9\x6e\x42\x47\xc4\xa6\x0b\x69\x39\xfe\x68\x8a\xb5\xaf\x57\xbd\x20\x46\x01\x9e\xc3\x86\xeb\x6e\x49\xfe\x48\x8e\xac\xb9\x4a\x85\x36\xe5\xc7\xd0\x81\xf8\xf1\x4e\xec\x5c\x7f\x43\x17\x0d\xad\x78\x6e\x1a\x64\x90\x74\x96\x76\x17\xfc\x26\x74\x05\xe1\xa9\xf5\x40\xa7\x6c\x8a\xae\xa3\x10\xc9\xa7\x60\xc3\xa2\x6e\xaa\xac\x64\xcd\xa2\xbe\xce\xd5\xf3\xc8\xa1\xaf\x60\xd9\xb5\xc4\xe1\xc1\xd5\x09\xe3\x16\x4d\x3f\xf3\x36\xf6\x10\xca\xe8\x5d\x6f\xa7\x71\x9a\x38\x4c\xbb\x79\x5d\x74\xe5\xd2\xea\xa5\x85\xe4\x7c\xb3\xaa\xbb\x6c\x34\x19\x8d\x5d\xdd\xd4\xb2\xab\x1a\x21\xd3\x29\x58\xc3\x19\x9c\xeb\x8a\x5d\xeb\x2d\x13\xe2\x9d\xf4\x78\xe6\x10\xa8\xb4\x16\xa2\xd1\xb5\xef\x8a\x6e\xf9\x30\x9d\x8a\x43\x2d\x93\xe8\x98\x22\x0b\x26\x53\x90\x94\x45\xd3\x91\x2b\x4a\xba\x25\x25\x1c\x88\x49\xc1\xc5\xdf\x98\xe6\x20\x54\xe4\x39\xe1\xb4\xa9\x68\x6b\x18\x61\xd4\x49\x1f\x00\xc2\x64\xc6\x75\x39\x38\x83\xfe\xfb\xed\x22\x0b\x20\x62\x4c\x4e\x4f\x4f\xc9\xcb\x63\x8c\x14\xbb\xd9\x04\xeb\xf1\xd8\x77\x8d\xb2\xf4\x22\xbf\xab\xbb\x25\xeb\x3b\x2b\x20\x02\x9f\xb1\x13\xf2\x8e\xd1\x07\x91\xf1\xa8\xf1\x61\xe2\x20\xa4\x2c\x13\x8c\x7a\xbb\x9b\x8f\x56\x0f\x45\x9f\x3b\xb9\x14\xea\x63\x04\xba\x59\xfd\x8a\xf5\xe0\xe3\x53\x12\xd2\xcb\xe7\xe0\x94\x63\x8f\xac\x58\xb5\xb4\xa8\xee\xe5\x51\xd5\xcd\xb5\xd0\xa1\x6e\x80\x94\x53\x11\x52\x59\x94\x6b\x7c\x62\x1e\x5d\xe4\x37\xf4\x9e\x67\x5e\x16\x8e\xd5\xaa\xef\x8f\x50\x4e\x12\x3e\x54\xc0\xb3\xd6\x80\x9f\xb6\xc6\xb7\xe2\x65\xa4\xb6\x62\x37\xf3\xa3\x26\x62\x14\x48\x93\xf2\x1a\xd6\xf9\xe6\x57\xf5\x02\x40\x91\x36\x25\x75\x91\x2c\x14\xe9\x25\x0c\x46\x78\x86\xcc\x6a\xe0\x70\x34\x83\x5f\x7f\x48\xd8\x01\x01\xec\x0a\x73\xe3\x89\xd4\x2f\x5e\xf8\xaa\xa9\x63\x2d\x9a\x8a\xad\x4d\x26\x9d\xfa\x0c\x10\x03\x40\xcb\xd7\x90\x9e\xf9\x62\xc5\x58\x2b\xff\x94\x44\x50\x6c\x9f\xa7\xe4\x01\x5e\x1c\x8f\xcf\x8f\xe6\x33\x4f\x58\xe4\x51\x09\xa1\x9e\x78\xcf\xe4\x6d\x94\x02\x7e\x28\x87\x0c\xa3\xb8\x4f\xf9\xac\x0d\xfd\x95\xaa\x37\x91\xb3\x92\x8e\x82\x36\xc5\x12\x3f\xec\xa8\x50\x90\xf6\xd2\x78\xb0\xd8\x78\x02\x13\x35\x2b\x58\xdf\x5d\xb9\xfc\xcd\xd2\xf9\x69\x9c\xdd\xba\x69\xa5\xb3\x9c\xdd\x35\x7e\x65\x45\x97\x88\x87\xd2\x13\xfe\xbe\x21\x2d\xc4\x6a\x6c\x89\x7a\xbc\xd3\x00\xb9\x67\xb7\xde\xfa\xe7\x76\x02\xa0\x5f\x73\x09\x10\x0a\x80\x3d\x6e\x51\x7b\x88\x4f\xcf\x96\xc5\xeb\x62\x23\xdb\x1b\xdb\xf3\x2d\xcc\x8a\x69\xf8\xf6\xe9\x83\x2c\x59\xd8\xef\xc8\x8a\x9c\xf3\x65\xa1\x5b\x2b\xa3\xa3\x25\xf2\x15\x74\x70\xf9\xed\x86\x36\xb4\xca\xe8\x2d\x6d\xba\x6f\x8b\xae\xb0\x8a\x06\xe0\x2d\x8f\xc5\xec\xcb\x71\xf9\x42\x55\xc0\x1c\x6b\x10\x96\xea\xba\x91\x3e\xd2\x86\x62\x5a\x81\x37\xde\x59\x56\xc2\x5d\x0e\x9b\xa6\x5f\x5f\xa9\x03\x4e\x75\xc4\x8f\xe9\xb4\x3f\x6c\xc7\xb3\x94\x93\x53\xc7\x21\xb4\xc4\x78\x4c\x16\x84\x04\xd6\x0b\x9c\xa7\x9c\x17\xd7\x14\x58\x8e\xfe\x74\x47\x39\x83\x76\xe0\x8e\xb5\x37\x87\xe4\x0d\xbb\x23\x3f\xf5\xd8\x09\xd4\xd0\x2d\x14\xe5\x0d\x81\xec\x20\x77\x05\x7c\x43\xcc\xf8\xa1\x2d\x6e\x6b\xe8\x1b\x18\xd4\x38\xce\xc5\x1a\x83\x26\xa2\x15\x8f\xa4\x64\x72\xcf\xfa\x96\x94\xac\xa2\xf9\x8f\xcd\x8f\xcd\x48\xc6\xa0\x16\xf8\x02\x24\x3e\x7b\x66\xda\x13\x2e\x36\xb8\x4d\xbd\xa7\xfe\x1e\x77\x01\x9f\xf5\x37\x23\xf2\xc2\x6c\x81\x3f\x47\x46\x81\x7d\x6f\x0d\x3e\xbf\x97\xe4\x12\x39\x8a\x06\x0a\xb8\x5d\x3a\xec\xb6\x26\xbb\x5c\x02\xb3\xc1\xf4\x24\xfe\xea\x33\x63\x3c\xb8\x68\xbd\x06\x07\xf2\xa4\x8f\xa0\xcc\x96\x25\xdd\x74\x27\xe4\x72\xd3\x5e\x28\xcf\xbe\xfd\xdb\xe5\xd0\xe6\xaa\x32\x66\x7b\x24\xb8\x70\xae\xfb\xaa\x39\x39\x57\x60\x34\x1f\x62\x54\x2e\x8b\x06\xbe\x24\x79\xa9\xb5\x73\xb6\xaa\x2e\x1c\x96\x0d\xbd\xb3\x5f\x87\xf8\x6e\x5a\x68\x6c\xe0\xfa\x59\x74\x3d\xf7\x98\xca\x47\x97\x36\x0e\x4a\x28\x5d\x1d\xfd\x0b\xe7\x3d\xf4\xe6\xeb\x35\x64\x57\x94\x63\x13\xcd\x5c\x1d\x81\x24\x39\x13\x9c\x74\xcf\x34\x90\xde\x4b\xa8\x8b\x08\x30\xba\x8f\x1a\x01\x68\x54\x50\x21\x47\x93\xdd\x74\x7d\xbb\x32\x24\xef\xdc\x8e\x59\x9a\x71\x42\x30\x4c\xd2\x19\xf8\x13\xab\x1b\xb8\x2b\x10\xb8\x2c\x18\xa1\xda\xfc\x91\x78\xa2\xcc\xe0\xc5\x2d\x45\xc9\x91\xbd\x18\x7a\x27\x98\x83\xa0\xa8\x22\xbc\x58\xb4\x6c\x0d\x4c\xff\x7a\xf6\xf6\x4d\x0e\xb7\x7a\x58\xa9\x17\xf7\x81\x68\x79\x43\x45\xb7\xee\x66\x2d\x52\x22\x66\x66\xa1\x07\x39\x0d\xa0\xee\xfb\x4d\x05\xbe\xff\xb4\xb0\xfb\x04\xd4\xb5\x3a\x9f\x75\x42\x22\x2b\xaa\x87\x0c\x37\xc4\x10\xd8\x06\x98\xf6\x21\x4f\x1d\x49\x1a\xb8\xed\x38\xc4\x95\x61\xa7\x21\x5d\x7b\x1f\x55\x47\x58\x15\x07\xb2\x29\xe0\x3e\x90\x79\x86\xc9\x83\x85\x2b\x1d\x5c\xcd\x32\x04\xaf\xad\xcf\x24\x10\xe2\xb0\x09\x4c\x4c\x33\xd2\x9e\xc7\x6b\xef\x0a\xe0\x62\x37\x66\x62\xed\x19\xae\xe9\x87\xa7\xb6\xaa\xfb\xb3\x99\x7d\x7a\x00\xd9\xec\x88\x0e\xa0\x6b\x7b\x3a\xb3\x7d\x8c\xad\xce\x4f\x29\xb4\xae\x3b\x9e\x5c\x49\xcf\xb0\x8c\xb2\x85\xb8\x55\x4b\x17\x02\x31\x25\xbd\xcc\x90\xbd\xab\xe1\xff\x73\x31\x9c\x4e\xc9\x6b\xda\xc2\x32\x38\x9e\x2b\x27\x61\x97\xe1\x1a\xed\x9e\xc9\x5e\x36\xb7\xc9\x8b\xc7\x78\x16\x2c\xef\x3f\xe8\xfa\x1a\x54\xe9\x1b\xbc\x80\x07\x32\x83\x8d\x38\x51\x5d\xc8\xa6\xd9\xb3\xf2\x91\x25\xec\x73\x0d\xfb\x1f\xd7\xb0\xe8\x90\x6c\x0d\xab\x2b\x88\x13\x2b\xb0\xc6\x33\x55\x62\x35\xa2\xcb\x99\xd9\x1b\x1c\xa9\x05\x15\x4e\xae\x04\x65\xed\x8a\x55\xf7\x1e\xcf\x52\x4a\xcf\x71\x21\x07\xc5\xe1\x4e\xac\xf7\x96\xeb\x4a\x84\x87\x51\xba\x58\xd5\x05\x7f\xaf\x9a\x2d\x3b\x91\xd3\xb9\xe0\x8e\x1a\x47\xaf\x96\xb4\xbc\xc1\xb9\x8a\x20\x12\xed\x3b\x1e\xb0\xa1\x91\x07\xa6\xd0\x55\x3f\x15\x13\xbc\xd1\x9a\x8e\xf0\x05\x82\x35\xec\xc4\x6c\x30\xc7\xa1\xb2\x55\x68\xad\xe6\xa1\x90\xef\xde\x40\x54\x87\xb8\x53\x28\xd4\x23\x33\x41\x74\xc2\x48\x4e\x0f\x9d\x21\x11\x58\xef\x16\x21\x67\xf2\xb5\x86\xdb\x8f\xe6\xc4\xfb\x2b\x79\xdc\xd9\xf1\xd1\x58\x6b\x42\xc2\xc9\x6c\xdb\x25\x67\x8f\xb8\xa0\x7c\x9e\xb7\x74\xb3\x2a\x4a\x9a\x4d\xff\xf9\xcd\x14\x22\x7d\xe4\x4d\x57\xed\xdc\xcd\x72\x05\xfd\x92\x4c\x0f\x0f\xc5\xb9\x19\xe2\x68\x28\xe7\x1d\x13\x5a\x89\xe7\x02\xbf\x55\x9a\x81\xf2\x76\x2f\xbf\xab\xb1\x36\xc3\xea\xf9\xd1\xdc\x7f\x9f\xe3\x0a\x2f\xf1\x9d\xcf\x88\xdd\x8c\x4e\x82\x09\x1b\xf8\x06\xa3\xcc\xed\x65\x20\xa6\x77\x76\x2f\xfa\x83\xe7\xa5\xc8\xc3\xf1\x98\x6d\x35\x7c\x69\x61\x2d\x76\x3a\x0f\xcd\x69\x16\x90\x55\x74\x45\x3b\x1a\x40\xac\x0d\xbd\x79\xb8\xdf\xc0\xc0\x0e\x33\x1e\xc6\x94\x84\xee\x9b\xf6\x5b\xda\x15\xf5\x2a\xee\x39\xd5\x73\x90\x18\x69\xff\x60\xbb\x10\xc4\xb4\xfd\x78\x80\x6f\x64\x5b\x70\x27\x23\xde\xc3\x15\x90\x23\xa8\xd9\x65\xc4\xf0\x24\x7a\x93\x8a\x35\x14\x11\xda\x49\xa8\x50\xd9\x64\x65\xaa\xab\x09\xf9\xc2\x5e\x49\x37\x78\x1a\xd5\xe1\x17\x11\x71\xf0\xe2\x66\xc0\x90\x68\x95\x90\x84\x6d\x89\x5d\x51\x11\x4b\xb3\x70\x6a\x98\x47\xfd\xe4\x7a\xe6\xeb\xe2\xd7\x36\xf7\x13\xfb\xc5\x8f\x25\xbf\x99\x76\xb7\xe9\xbf\xae\xc0\x5f\x37\xb3\x20\x73\xe1\x9e\xee\xa5\x2e\xc6\x15\xe6\xfc\xf1\x3c\x35\x99\x86\xdd\xb4\x52\x77\x2a\xaf\x24\x64\x50\x7f\x14\x59\xa0\xa8\xff\xa2\x0d\xf7\x7c\x35\x8f\x77\xc0\x5d\x5e\xa7\xee\x79\x62\xf9\x09\x60\xb2\x13\x4e\xd2\x80\xf2\x08\x48\x89\x28\x9d\x01\x6d\x2a\xf9\x88\x6b\xe9\x05\x96\x13\x53\x66\x52\xd7\x4d\x48\xfc\x5d\x4d\xb2\xfb\xf9\xb8\xd7\x77\xf6\xb3\x7d\xac\x24\x8f\x65\x9a\x63\xfc\x74\x1b\x7b\xcc\x07\x60\x13\x61\x73\x51\x82\x65\x37\x3c\xb8\x45\x8c\xa7\x27\xc6\xa7\x09\x81\x9f\x06\xb5\x43\xae\x1f\x0d\xdb\xbf\x7b\xd4\x1a\x2c\x05\xf2\xd6\x68\x01\x06\x0e\x4b\x7e\x8b\xcb\xc9\x10\xd4\xb9\x60\xb7\x03\xf8\xa6\xcf\x03\x0c\x6c\xe9\x9a\xdd\xd2\x47\xc0\xe0\xaf\x16\x8e\x42\xc2\x64\x8f\x23\xed\x8a\xfa\x9b\x5f\x26\x57\x9e\x78\x56\xcf\xa7\xc1\x59\xc9\x59\xf0\xc0\x59\xe1\xcb\x43\x59\x61\x52\xa7\x86\xfa\x3f\xbe\x76\x75\x6c\x17\xcd\x57\x49\x9a\x5f\x6d\x7c\x24\xcb\x95\x1f\x1d\xda\x4b\x91\x0b\xe5\xc7\xdf\x2c\x9d\x33\x0c\xd5\x7a\x5d\xe1\xf4\x90\xa4\x54\xf5\x48\x86\xae\x21\x49\x51\x3c\x01\x94\x1f\x86\xe5\x7d\x81\xf9\x01\x68\xde\x03\x9c\x3f\x35\x3c\xef\x06\xe8\x24\x44\xff\x52\x65\xf3\x01\xf0\x37\x09\x8a\xd8\x2f\x13\xbd\xc2\xf7\x7b\x62\x51\x86\x52\xb2\xa5\x08\xbe\x3f\x0d\x71\x74\x49\x60\x70\x8c\x0e\xcc\x08\x00\x29\x6e\xe8\x9f\x71\x7c\x82\xf3\x73\x39\x8b\x39\x21\xa8\xbe\x3b\xed\x3a\x19\x8e\xbb\xad\x95\x12\xbf\x3e\x36\xcc\x1d\x13\x93\xaa\xc9\x17\x57\xbf\xbd\xfb\x76\x30\xb4\xfe\x87\xd4\x4a\xdf\x22\x51\x2b\x67\x50\x6d\x3f\x1f\x3d\x91\xb6\x9f\x7d\x67\xd3\x91\xd0\x07\xa7\xd4\x69\x19\x2f\x89\x3b\xae\x4e\x0a\x48\xf5\xc6\xc9\x09\xb6\x4f\x12\x3c\x1a\xc8\xa6\x60\xc2\x6b\x3f\x1f\x3f\x34\xf8\x54\x0d\xef\xe7\x79\xc3\x6f\xb6\x73\x7f\xda\xbc\xc1\xf9\x4f\x20\x39\x0f\x9f\x4e\xc9\xbb\x96\xe1\xb9\x93\x25\x63\x37\xa4\x02\xcc\x38\xc0\x00\x15\x03\xea\x1f\xee\x37\x6a\x24\xec\x62\xeb\x08\x1b\x3c\x3b\xc0\x2e\x64\x56\x8a\x6d\x4c\xa0\xe8\x48\xc6\xee\xae\x7f\xce\x01\xe1\xf2\x80\x13\xb2\xc4\x94\xfd\x42\xcd\xc5\x77\x08\x93\x91\x50\x05\x3b\xe4\x8c\xde\xd5\x37\xd2\x26\x1e\xf8\xef\x52\x67\x4f\xd3\xf9\x7d\x53\x2e\x5b\xd6\xd4\xff\xa1\xb1\xfd\xf1\x6b\x72\xf4\xfe\x7f\x03\x00\x00\xff\xff\xf1\xce\x4b\x02\xd8\x2f\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 12248, mode: os.FileMode(420), modTime: time.Unix(1461673273, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _pr_review_peer_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4b\x73\xdb\xb6\x13\xbf\xeb\x53\xac\xc6\x33\x21\x39\x96\x69\xe7\x2a\x8d\xf3\xcf\xbf\x4e\x0f\x7d\x8c\xed\x89\xd3\xe9\xc1\x76\x65\x88\x5c\x49\x8c\x28\x82\x05\x40\xab\x6a\xa2\xef\xde\x05\xc0\x07\x48\x3d\x2c\xa7\x39\x96\x07\x49\x04\x16\xbb\xbf\x7d\x63\x35\x2d\xb2\x48\x25\x3c\x83\x34\xf2\xa5\x12\x01\x7c\xe9\x01\x08\x54\x85\xc8\x80\xde\xe1\xcd\x1b\xfd\x15\x2a\xfe\x2b\x5f\xa1\xb8\x62\x12\xe1\x7f\xdd\x15\x3f\x80\xa1\x5e\x1b\xf5\x36\xbd\x5e\xcd\x30\x2f\xd2\xf4\x23\xfe\x59\xa0\x54\x37\x39\x66\x18\xfb\xf8\x8c\x99\xfa\xc0\x14\x1b\x40\x91\xc7\x4c\xa1\x95\xf6\xcc\x84\x4b\xfc\x9b\x44\x01\x97\x1a\x4f\x4d\x1f\xea\xed\xb1\xb0\xfb\x61\x41\x04\x61\xca\x67\x49\x16\x8c\xca\xe3\x02\x9f\x13\xd4\x68\x78\x91\x29\x3a\x1c\xf1\x6c\x9a\xcc\xc2\xd6\x72\x45\x9b\x8b\xeb\x62\x39\x31\x32\x1a\x01\x99\x59\xaa\x48\x96\x28\x25\x9b\xe1\xa8\x47\xef\xc9\x14\xfc\xbe\x0b\x17\xaa\x6d\x62\xe0\xfd\x7f\x85\x92\x2f\x11\x56\x5c\x2c\xfa\x70\xcd\x57\xf0\xb9\x90\x0a\x64\xa2\x60\xc2\xa2\x05\xb0\x2c\x86\x15\xa3\xb7\x29\x17\xf0\x49\xb0\xe7\x44\x82\xe2\x90\x33\x29\xcd\xde\x93\x07\xa7\x1d\xf4\xa7\xe0\x3d\x01\x57\x73\x14\x86\xd4\x6e\xc2\x9a\x17\x82\xd4\x8a\x31\x7c\xc8\x1e\x32\xcf\x40\x6b\x90\x9c\x12\x94\x87\xec\xe4\xe4\x04\x3e\x5a\xf2\x88\x2f\x97\xc4\x5f\x1a\xd2\x2e\xe5\x19\xb0\x28\xc2\x5c\x0d\xe1\x29\x17\xe3\x52\xc0\xcd\x2f\x4f\x7b\x88\x73\x91\x10\x2c\xa9\x98\x2a\x64\xeb\x88\x5d\xaa\x8e\x6d\x00\x53\x8a\x8e\x2d\x13\xdd\x69\xfb\xf0\x29\x90\x46\x30\x4d\x52\x94\x40\xaa\x62\x19\x01\x71\xff\x25\x13\x64\x88\xb1\x63\x07\xcd\x25\x9a\xb3\x6c\x86\x32\xb4\x62\x6b\x27\x95\x4e\x97\x24\x23\x53\x95\xaf\x22\x81\x24\xe6\x27\x29\x0b\xbc\x22\x9b\xd0\x8e\x5f\x05\xc0\xa0\x42\x19\x58\x3e\x15\xf1\x9d\x51\xcb\x37\xc7\xf7\x84\xe0\x1c\x59\x1c\xca\x39\x1b\x18\x22\x8f\xc2\x3b\x4e\xb2\x99\x37\x38\x74\xa6\x10\x69\x49\x7e\x4b\xcb\x50\x2e\x57\x7a\xe9\x20\x21\x16\xb0\xd3\x18\x90\x23\x99\xc2\xab\xa4\x55\x0e\xf0\xe8\xdd\x60\x97\xec\x19\xb5\xc0\x5a\x35\x7d\x68\x58\xb2\x2c\x89\xc7\x91\xe6\xe6\x0d\xe0\xe7\xbb\x9b\xeb\x90\xb2\x95\xb6\x92\xe9\xda\x6f\x09\x0b\x8e\x66\x87\xf1\x78\xb2\xde\xe6\x76\xff\xa8\x59\x90\x4f\x76\xd6\x81\xca\x03\xb5\x85\x9c\x02\xb0\x2b\x2b\x13\xed\xb6\x4e\x6e\x4a\xb2\x35\x8a\x6b\xb6\xc4\x6e\x91\xb0\x3b\x9d\xca\x30\xe1\xf1\xba\xc5\x33\xb2\x18\x42\xbd\x11\x12\xee\xa5\x5f\xd3\x46\xcb\xd8\xe4\xd5\x38\x44\x16\xcd\x7d\x43\x21\xf3\x34\x51\x3e\x25\x97\x17\x0c\xa0\xd6\xc9\xaf\x22\xa7\x8c\x32\x1d\x7f\xe5\x52\x98\x10\x8a\xbf\x6e\xa6\xbe\xe3\xa7\x00\x2e\x2f\x2f\xe1\xa2\xa2\x06\x2d\x89\x40\x8d\x43\xca\x07\x85\xc2\x2f\x57\xb5\xe4\x25\xcb\x6b\x4e\xb2\x98\x58\xcb\xfa\x6f\x2f\x82\x0a\x09\xb4\x81\xe4\x4c\xa8\x86\xaf\x7e\xca\xe2\xad\x37\x4a\xfd\xa8\x0e\xe6\x29\x8b\xd0\x3f\xff\xe3\xfd\xf9\x00\x3c\x2f\x18\xd5\xf4\x9b\x60\x50\xff\x6e\xb8\x12\xbe\x9d\x4c\xfb\x7d\x63\xa3\xfa\x70\xf9\x2b\x28\xcb\x11\xe8\xc2\x2b\x79\x8a\xda\x09\xbe\xa7\xb5\xd4\xf1\x4c\xdf\xe1\x67\x9e\x64\x06\x7c\x43\x2b\x57\x89\x22\x33\xd3\xee\xfd\xc5\x63\xbb\x9f\xb8\xc2\x23\xdd\x73\x3c\xbe\xf0\x86\x3d\x07\x90\x8d\x99\x0f\xa8\x58\x92\x4a\xb2\xe5\x0c\xd5\x6d\x13\x68\xe5\x7a\x1d\xc0\x8e\xc2\x07\xfa\x4d\xcd\xaf\xdb\x62\xdc\x93\xad\x7c\xb9\x53\xe6\x28\x67\xf1\x91\xe9\x17\xc0\xd7\xaf\x3b\xbb\x13\xe9\x7f\x67\x7d\xbd\x4f\x62\xfc\xc3\xfa\x78\x71\x36\x3d\x8d\x34\xef\xfe\xd1\x1b\x75\x4d\xd7\x6d\x98\x26\x8d\x29\x64\xc8\xf8\x5d\x05\x0f\xe0\xd9\x79\xd0\xe2\x0c\x5a\x22\x75\x7e\xb8\x89\x4b\xd9\xd0\xf1\x40\x3b\xdc\x5e\xa8\xdb\xde\x15\xcb\xea\xca\xc9\x57\xb6\xc6\x54\x15\xd5\x6b\x01\xae\x42\xd7\x5d\xdb\x74\xa1\x35\xc8\xeb\xec\x6d\xd0\x06\xf0\x0e\xce\xde\x76\xf1\x9d\x9f\x03\x4b\x09\x23\x55\x97\xea\x34\x4c\xd6\xd4\x9e\xa8\xc1\xeb\xe8\x79\x85\x32\xef\x75\x8e\x38\xd6\xd1\x05\xbf\xcb\xbb\xff\x4a\xad\x1c\x8d\xf2\x42\xce\x5d\x75\x46\xdb\x64\xd6\xd7\x67\x67\x5b\x3e\x6b\x87\xc9\x3b\xb7\x84\xb9\x9a\xb9\x1d\xb3\x79\x9a\x74\x6a\xb7\xcb\xe6\xe9\x34\xce\x5d\x47\xeb\xae\xe9\x9c\xfa\x77\xfd\xd3\x15\xef\x76\xd2\xe6\x69\x99\xa8\x75\xad\xf9\x4e\x6a\xcb\x82\xee\x5f\x72\x1b\xd0\xeb\xd5\x8e\x79\x86\xdf\xa6\xd7\xa1\x4b\x53\x57\xd1\x7d\x91\xdb\x5c\x36\xf3\x14\xd5\x8e\x28\xdd\xec\x8b\xcf\xef\x7c\x63\x79\x0d\xdb\x3d\x37\x97\x26\x63\x02\xb7\x76\x4d\xc8\x00\x8b\x51\xa7\x19\xd9\x8b\x2f\x35\xa4\x46\xf2\x7f\xad\xe1\x1b\x5b\x83\x33\x6f\xe9\x69\xe1\xf7\x32\x8f\xcb\xf8\x9e\x0a\xbe\xdc\x33\x21\xd8\xa4\x7e\xaa\xe6\xa1\x86\xe3\xbe\xa1\xc8\x54\xe8\x66\x76\xb2\x4f\x79\xd7\x6b\x00\xba\x97\xab\x4a\xe6\x76\x5e\xb4\x27\x24\x17\x5f\xab\x76\xb4\x55\x3d\x7a\x16\x39\x10\x7a\x02\x39\x15\xcd\xad\xd0\x9b\xb2\x05\xfe\xa8\xef\xb8\x64\xc3\x2f\xf6\xc2\x3c\x84\x86\xb9\x3b\x88\x0c\x5f\xba\x2b\x6d\x5c\x15\xb6\xa7\xf8\x5a\xd4\x3e\xa8\x36\xe9\xf5\xe7\xc6\xce\x02\xd4\x2b\x6f\x05\xd7\x15\x0f\xe6\x9c\x2f\x80\x06\x3f\xd6\xd3\xd5\xc7\xdc\xca\x3f\xad\x73\x7b\x23\xf0\x5c\x94\x9e\xfe\xe7\xa1\xb9\xb5\x33\xeb\x11\x43\xc6\x0d\x0e\xcf\x3a\xe5\xc0\xbf\x0c\x5a\xb8\x2d\xde\x3b\x64\x99\xd1\x62\x5c\x0e\x03\x07\x84\x59\x9f\xc5\x1d\x0a\x3b\x98\xb8\x78\xb7\xd0\x6c\xcf\x3a\x87\xe0\x1c\xa9\xba\x5c\x67\xd1\x5c\xf0\x2c\xf9\x1b\x5f\xd6\x7f\x00\x4a\x14\x68\x5c\xf0\x4f\x00\x00\x00\xff\xff\x26\x83\x60\x94\xe6\x11\x00\x00")

func pr_review_peer_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_peer_js,
		"pr_review_peer.js",
	)
}

func pr_review_peer_js() (*asset, error) {
	bytes, err := pr_review_peer_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review_peer.js", size: 4582, mode: os.FileMode(420), modTime: time.Unix(1446620676, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
	"pr_review_peer.js": pr_review_peer_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
	"pr_review_peer.js": &_bintree_t{pr_review_peer_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

